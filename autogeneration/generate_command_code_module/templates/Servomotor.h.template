#ifndef SERVOMOTOR_H
#define SERVOMOTOR_H

#ifdef ARDUINO
#include <Arduino.h>
#endif
#include "Communication.h"
#include "Commands.h"
#include "DataTypes.h"
#include "Utils.h"
#include "AutoGeneratedUnitConversions.h"

// ============================================================================
// DATA STRUCTURES
// ============================================================================

// AUTO-GENERATED DATA STRUCTURES
{{generate_payload_structures}}

// These enum-to-string conversion functions are implemented in the cpp file
// but declared in AutoGeneratedUnitConversions.h

// ============================================================================
// SERVOMOTOR CLASS
// ============================================================================

class Servomotor {
public:
    // Constructor & basic methods
    Servomotor(uint8_t alias = 'X', HardwareSerial& serialPort = Serial1);
    
    void setAlias(uint8_t new_alias);
    uint8_t getAlias();
    
    // Addressing and command methods
    void sendCommand(uint8_t commandID, const uint8_t* payload, uint16_t payloadSize);
    void setUniqueId(uint64_t uniqueId);
    uint64_t getUniqueId() const;
    bool isUsingExtendedAddressing() const;
    void openSerialPort();
    int getError() const;
    
    // Helper methods for device management
    void setDeviceAliasByUniqueId(uint64_t uniqueId, uint8_t alias);
    
    // CRC32 control methods
    void enableCRC32();
    void disableCRC32();
    bool isCRC32Enabled() const;

    // Unit settings
    void setPositionUnit(PositionUnit unit);
    void setVelocityUnit(VelocityUnit unit);
    void setAccelerationUnit(AccelerationUnit unit);
    void setTimeUnit(TimeUnit unit);
    void setTemperatureUnit(TemperatureUnit unit);
    void setVoltageUnit(VoltageUnit unit);
    void setCurrentUnit(CurrentUnit unit);

    // Unit conversion methods - These are implemented in the cpp file
    // but declared in AutoGeneratedUnitConversions.h

    // AUTO-GENERATED COMMAND METHODS
{{generate_command_methods}}

private:
    uint8_t _alias;
    uint64_t _uniqueId;
    bool _useExtendedAddressing;
    Communication _comm;
    int _errno;

    // Unit settings
    PositionUnit m_positionUnit = PositionUnit::SHAFT_ROTATIONS;
    VelocityUnit m_velocityUnit = VelocityUnit::ROTATIONS_PER_SECOND;
    AccelerationUnit m_accelerationUnit = AccelerationUnit::ROTATIONS_PER_SECOND_SQUARED;
    TimeUnit m_timeUnit = TimeUnit::SECONDS;
    TemperatureUnit m_temperatureUnit = TemperatureUnit::CELSIUS;
    VoltageUnit m_voltageUnit = VoltageUnit::VOLTS;
    CurrentUnit m_currentUnit = CurrentUnit::AMPS;
};

#endif // SERVOMOTOR_H