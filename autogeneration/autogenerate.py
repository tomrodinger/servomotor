#!/usr/bin/env python3

"""
autogenerate.py

This script runs all the autogeneration programs for the Servomotor Arduino library.
It serves as a central entry point for generating all the necessary files.
"""

import os
import sys
import argparse
import subprocess
import importlib.util

# Get the absolute path of the current script
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
# Get the Arduino library directory (parent of autogeneration directory)
ARDUINO_LIB_DIR = os.path.dirname(SCRIPT_DIR)

def import_module_from_file(module_name, file_path):
    """Import a module from a file path."""
    spec = importlib.util.spec_from_file_location(module_name, file_path)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    return module

def run_autogenerate_unit_conversions(motor_type):
    """Run the autogenerate_unit_conversions.py script."""
    print("\n=== Running autogenerate_unit_conversions.py ===")
    
    # Run the script as a subprocess
    module_path = os.path.join(SCRIPT_DIR, "autogenerate_unit_conversions.py")
    cmd = [sys.executable, module_path, motor_type]
    subprocess.run(cmd, check=True)
    
    # The JSON file is generated directly in the python_programs/servomotor directory
    json_file = os.path.join(os.path.dirname(SCRIPT_DIR), "python_programs", "servomotor", f"unit_conversions_{motor_type}.json")
    print(f"Generated {json_file}")
    
    return json_file

def run_generate_unit_conversion_code(json_file):
    """Run the generate_unit_conversion_code.py script."""
    print("\n=== Running generate_unit_conversion_code.py ===")
    
    # Run the script as a subprocess
    module_path = os.path.join(SCRIPT_DIR, "generate_unit_conversion_code.py")
    cmd = [sys.executable, module_path, json_file]
    subprocess.run(cmd, check=True)
    
    # The files are generated directly in the Arduino library directory
    for filename in ["AutoGeneratedUnitConversions.h", "AutoGeneratedUnitConversions.cpp"]:
        output_path = os.path.join(ARDUINO_LIB_DIR, filename)
        print(f"Generated {output_path}")

def run_generate_command_code():
    """Run the generate_command_code.py script."""
    print("\n=== Running generate_command_code.py ===")
    
    # Import the module
    module_path = os.path.join(SCRIPT_DIR, "generate_command_code.py")
    
    # Run the script as a subprocess with -y flag to skip prompts
    cmd = [sys.executable, module_path, "-y"]
    subprocess.run(cmd, check=True)
    
    # The files are generated directly in the Arduino library directory, no need to move them

def run_bldc_sin_lookup_table(motor_type):
    """Run the BLDC_sin_lookup_table.py script."""
    print("\n=== Running BLDC_sin_lookup_table.py ===")
    
    # Import the module
    module_path = os.path.join(SCRIPT_DIR, "BLDC_sin_lookup_table.py")
    
    # Run the script as a subprocess
    cmd = [sys.executable, module_path, motor_type]
    subprocess.run(cmd, check=True)
    
    # The files are generated in a specific location defined in the script

def run_compute_hall_sensor_constants(motor_type, recalculate_weights=False):
    """Run the compute_hall_sensor_constants.py script."""
    print("\n=== Running compute_hall_sensor_constants.py ===")
    
    # Import the module
    module_path = os.path.join(SCRIPT_DIR, "compute_hall_sensor_constants.py")
    
    # Run the script as a subprocess
    cmd = [sys.executable, module_path, motor_type]
    if recalculate_weights:
        cmd.append("--recalculate-weights")
    subprocess.run(cmd, check=True)
    
    # The files are generated in a specific location defined in the script

def main():
    parser = argparse.ArgumentParser(
        description='Run all autogeneration programs for the Servomotor Arduino library.',
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument('motor_type',
                       help='Motor type (e.g., M3).\nThe program will look for SETTINGS_<motor_type>.py')
    parser.add_argument('--recalculate-weights', action='store_true',
                       help='Recalculate hall sensor weights (for compute_hall_sensor_constants.py)')
    parser.add_argument('--skip-hall-sensor', action='store_true',
                       help='Skip running compute_hall_sensor_constants.py')
    parser.add_argument('--skip-bldc', action='store_true',
                       help='Skip running BLDC_sin_lookup_table.py')
    
    args = parser.parse_args()
    
    # Run the autogeneration programs in sequence
    json_file = run_autogenerate_unit_conversions(args.motor_type)
    run_generate_unit_conversion_code(json_file)
    run_generate_command_code()
    
    if not args.skip_bldc:
        run_bldc_sin_lookup_table(args.motor_type)
    
    if not args.skip_hall_sensor:
        run_compute_hall_sensor_constants(args.motor_type, args.recalculate_weights)
    
    print("\n=== All autogeneration programs completed successfully ===")

if __name__ == "__main__":
    main()