/*
  test_motor.cpp

  A desktop test program to verify your "Motor" class 
  can set position/time units and call trapezoidMove() 
  with user-friendly units.

  Steps to run on Mac:
    1) Place these files in one folder:
         - ArduinoEmulator.h
         - AutoGeneratedUnitConversions.h / .cpp
         - Motor.h / .cpp
         - test_motor.cpp
    2) Compile:
         g++ -std=c++17 test_motor.cpp Motor.cpp AutoGeneratedUnitConversions.cpp -o testMotor
    3) Run:
         ./testMotor
*/

#include "ArduinoEmulator.h"                // Emulates Arduino's Serial, delay, etc.
#include "AutoGeneratedUnitConversions.h"   // Our unit conversion logic
#include "Motor.h"                          // The Motor class we wrote

int main() {
    // Emulate Serial.begin
    Serial.begin(115200);

    // Create a Motor instance
    Motor motor;

    // Let's try different units
    motor.setPositionUnit(PositionUnit::SHAFT_ROTATIONS);
    motor.setTimeUnit(TimeUnit::SECONDS);

    // Move 2 shaft rotations over 3 seconds
    motor.trapezoidMove(2.0f, 3.0f);

    Serial.println();

    // Try a different scenario: position in DEGREES, time in MINUTES
    motor.setPositionUnit(PositionUnit::DEGREES);
    motor.setTimeUnit(TimeUnit::MINUTES);

    // Move 1800 degrees over 0.25 minutes
    // (i.e. 5 shaft rotations over 15 seconds if you do the math)
    motor.trapezoidMove(1800.0f, 0.25f);

    Serial.println();

    // You can do more tests if you like. 
    // This program won't produce "PASS/FAIL" lines unless 
    // you explicitly check them. It's primarily a demonstration 
    // of how to set units and see internal conversions.

    return 0;
}