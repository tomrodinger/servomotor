#!/usr/bin/env bash

# Deploy Servomotor Library to Arduino Library Manager Repository
# This script clones the Arduino Library repository, copies updated files,
# commits changes, and creates a new release tag with user approval at each step.

set -e  # Exit on any error

# Configuration
ARDUINO_REPO_URL="https://github.com/tomrodinger/Servomotor_Arduino_Library.git"
WORK_DIR="/tmp/servomotor_arduino_deploy_$$"  # Unique directory with process ID
SOURCE_DIR="$(cd "$(dirname "$0")" && pwd)"  # Current directory with updated files

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Function to ask user for approval
ask_approval() {
    local message="$1"
    echo -e "${YELLOW}$message${NC}"
    echo -e "${YELLOW}Do you want to proceed? (y/n): ${NC}"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        echo -e "${RED}Operation cancelled by user.${NC}"
        cleanup_and_exit
    fi
}

# Function to cleanup and exit
cleanup_and_exit() {
    if [ -d "$WORK_DIR" ]; then
        echo -e "${YELLOW}Cleaning up temporary directory: $WORK_DIR${NC}"
        rm -rf "$WORK_DIR"
    fi
    exit 1
}

# Function to get current version from library.properties
get_current_version() {
    grep "^version=" "$SOURCE_DIR/library.properties" | cut -d'=' -f2
}

# Function to increment version
increment_version() {
    local version="$1"
    # Split version into parts (assuming semantic versioning like x.y.z)
    IFS='.' read -ra VERSION_PARTS <<< "$version"
    local major="${VERSION_PARTS[0]}"
    local minor="${VERSION_PARTS[1]}"
    local patch="${VERSION_PARTS[2]}"
    
    # Increment patch version
    patch=$((patch + 1))
    echo "$major.$minor.$patch"
}

# Trap to cleanup on script exit
trap cleanup_and_exit EXIT

echo -e "${GREEN}=== Servomotor Arduino Library Deployment Script ===${NC}"
echo ""

# Step 1: Check current version and ask for new version
CURRENT_VERSION=$(get_current_version)
SUGGESTED_VERSION=$(increment_version "$CURRENT_VERSION")

echo -e "${YELLOW}Current version in library.properties: $CURRENT_VERSION${NC}"
echo -e "${YELLOW}Suggested new version: $SUGGESTED_VERSION${NC}"
echo -e "${YELLOW}Enter the new version number (or press Enter for $SUGGESTED_VERSION): ${NC}"
read -r NEW_VERSION
if [ -z "$NEW_VERSION" ]; then
    NEW_VERSION="$SUGGESTED_VERSION"
fi

ask_approval "STEP 1: Update version from $CURRENT_VERSION to $NEW_VERSION in library.properties"

# Update version in library.properties
sed -i.bak "s/^version=.*/version=$NEW_VERSION/" "$SOURCE_DIR/library.properties"
echo -e "${GREEN}✅ Updated library.properties version to $NEW_VERSION${NC}"

# Step 2: Create temporary working directory
ask_approval "STEP 2: Create temporary working directory at $WORK_DIR"

mkdir -p "$WORK_DIR"
echo -e "${GREEN}✅ Created temporary directory: $WORK_DIR${NC}"

# Step 3: Clone Arduino Library repository
ask_approval "STEP 3: Clone Arduino Library repository from $ARDUINO_REPO_URL"

cd "$WORK_DIR"
git clone "$ARDUINO_REPO_URL" arduino_library
cd arduino_library
echo -e "${GREEN}✅ Cloned Arduino Library repository${NC}"

# Step 4: Copy updated files using the existing copy script logic
ask_approval "STEP 4: Copy updated library files to the Arduino Library repository"

# Clear existing source files
rm -rf src/ 2>/dev/null || true
rm -f *.properties *.md *.txt LICENSE 2>/dev/null || true

# Clear existing examples directory (we'll recreate it with our examples)
rm -rf examples 2>/dev/null || true

# Define core files that need to be copied (same as copy_stuff_to_Arduino.sh)
CORE_FILES=(
    "Servomotor.cpp"
    "Servomotor.h"
    "Commands.h"
    "Communication.cpp"
    "Communication.h"
    "DataTypes.cpp"
    "DataTypes.h"
    "Utils.h"
    "AutoGeneratedUnitConversions.cpp"
    "AutoGeneratedUnitConversions.h"
    "library.properties"
    "README.md"
    "keywords.txt"
    "LICENSE"
)

# Create standard Arduino library directories
mkdir -p src examples

# Copy implementation files (.cpp) to src directory only
# Copy header files (.h) to both root and src directory
echo "Copying library files..."
for FILE in "${CORE_FILES[@]}"; do
    if [ -f "$SOURCE_DIR/$FILE" ]; then
        if [[ "$FILE" == *.cpp ]]; then
            # Copy .cpp files to src/ only
            cp "$SOURCE_DIR/$FILE" src/
            echo "  ✅ $FILE (copied to src/)"
        elif [[ "$FILE" == *.h ]]; then
            # Copy .h files to both root and src/
            cp "$SOURCE_DIR/$FILE" src/
            cp "$SOURCE_DIR/$FILE" .
            echo "  ✅ $FILE (copied to both root and src/)"
        elif [[ "$FILE" == "library.properties" || "$FILE" == "README.md" || "$FILE" == "LICENSE" || "$FILE" == "keywords.txt" ]]; then
            # These files go to root only
            cp "$SOURCE_DIR/$FILE" .
            echo "  ✅ $FILE (copied to root)"
        else
            # Other files go to src/
            cp "$SOURCE_DIR/$FILE" src/
            echo "  ✅ $FILE (copied to src/)"
        fi
    else
        echo "  ❌ Warning: $FILE not found!"
    fi
done

# Copy examples with proper naming convention (convert example_name to Example_Name)
echo "Creating examples:"
FOUND=0
for SRC in "$SOURCE_DIR"/example_*.cpp; do
    [ -f "$SRC" ] || continue
    FOUND=1
    bn="$(basename "$SRC")"
    
    # Convert example_multi_move.cpp to Multi_Move
    example_name="${bn%.cpp}"           # Remove .cpp extension
    example_name="${example_name#example_}"  # Remove example_ prefix
    
    # Convert underscores to title case: multi_move -> Multi_Move
    DIR=""
    IFS='_' read -ra PARTS <<< "$example_name"
    for part in "${PARTS[@]}"; do
        # Capitalize first letter of each part
        capitalized="$(tr '[:lower:]' '[:upper:]' <<< "${part:0:1}")${part:1}"
        DIR="${DIR}${DIR:+_}${capitalized}"
    done
    
    mkdir -p "examples/$DIR"
    # Copy and rename the example to match directory name (Arduino sketch convention)
    cp "$SRC" "examples/$DIR/$DIR.ino"
    echo "  ✅ Created example: $DIR/$DIR.ino from $bn"
done
if [ "$FOUND" -eq 0 ]; then
    echo "  ⚠️  No example_*.cpp files found in $SOURCE_DIR"
fi

echo -e "${GREEN}✅ Files copied to Arduino Library repository${NC}"

# Step 5: Check git status and show changes
ask_approval "STEP 5: Review changes in the repository (git status and diff)"

echo -e "${YELLOW}Git status (before adding files):${NC}"
git status

echo -e "${YELLOW}Git diff (showing changes to existing files):${NC}"
git diff --name-status || echo "No existing files to compare"

# Step 6: Stage files for commit
ask_approval "STEP 6: Stage all files for commit (git add .)"

git add .
echo -e "${GREEN}✅ Files staged for commit${NC}"

# Step 7: Show what will be committed
ask_approval "STEP 7: Review what will be committed"

echo -e "${YELLOW}Files that will be committed:${NC}"
git diff --cached --name-status
echo ""
echo -e "${YELLOW}Summary of staged changes:${NC}"
git diff --cached --stat

# Step 8: Commit changes
ask_approval "STEP 8: Commit changes (git will open editor for commit message)"

echo -e "${YELLOW}Git will open your default editor for the commit message...${NC}"
if git commit; then
    echo -e "${GREEN}✅ Changes committed${NC}"
else
    echo -e "${RED}Commit was cancelled or failed.${NC}"
    cleanup_and_exit
fi

# Step 7: Create and push tag
ask_approval "STEP 7: Create git tag v$NEW_VERSION and push to GitHub"

git tag "v$NEW_VERSION"
git push origin main
git push origin "v$NEW_VERSION"
echo -e "${GREEN}✅ Tag v$NEW_VERSION created and pushed${NC}"

# Step 8: Cleanup
ask_approval "STEP 8: Clean up temporary directory $WORK_DIR"

# Disable the trap since we're cleaning up intentionally
trap - EXIT
cd /
rm -rf "$WORK_DIR"
echo -e "${GREEN}✅ Cleanup completed${NC}"

echo ""
echo -e "${GREEN}=== DEPLOYMENT COMPLETED SUCCESSFULLY ===${NC}"
echo -e "${GREEN}Library version $NEW_VERSION has been deployed to the Arduino Library repository.${NC}"
echo -e "${GREEN}Arduino Library Manager will pick up the new release automatically.${NC}"
echo -e "${GREEN}Users will now see 'Servomotor by Gearotons' when searching in Arduino IDE.${NC}"