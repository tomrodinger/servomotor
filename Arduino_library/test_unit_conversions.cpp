/*
  test_unit_conversions.cpp

  A desktop test program to emulate and validate your Arduino-based
  unit conversions. We now corrected factors so:

    - 2 minutes => 120 seconds
    - 60 rpm/s => 1 RPS^2
    - 1000 mA => 1 A

  That way, your test will pass without needing to alter your JSON 
  (which is presumably consistent with your Python usage).

  Compile on Mac with:
    g++ -std=c++17 test_unit_conversions.cpp AutoGeneratedUnitConversions.cpp -o runTest

  Then do:
    ./runTest
*/

#include "ArduinoEmulator.h"
#include "AutoGeneratedUnitConversions.h"
#include <cmath>

static bool allTestsPassed = true;

// Compare results with an expected value
bool checkClose(const char* testName, float actual, float expected, float tolerance=0.001f) {
    float diff = std::fabs(actual - expected);
    if (diff > tolerance) {
        Serial.print("FAIL: ");
        Serial.print(testName);
        Serial.print(" -> Expected ");
        Serial.print(expected);
        Serial.print(" but got ");
        Serial.print(actual);
        Serial.print(" (diff=");
        Serial.print(diff);
        Serial.println(")");
        allTestsPassed = false;
        return false;
    } else {
        Serial.print("PASS: ");
        Serial.print(testName);
        Serial.print(" -> ");
        Serial.println(actual);
        return true;
    }
}

void testTimeConversions() {
    Serial.println("=== testTimeConversions() ===");
    {
        float val = 1.0f;
        float out = convertTime(val, TimeUnit::SECONDS, TimeUnit::MILLISECONDS);
        // Expect 1000
        checkClose("Time: 1 second -> 1000 ms", out, 1000.0f, 0.5f);
    }
    {
        float val = 2.0f;
        float out = convertTime(val, TimeUnit::MINUTES, TimeUnit::SECONDS);
        // Expect 120 now that factor(MINUTES)=0.0166667 => 2 / 0.01666=120
        checkClose("Time: 2 minutes -> 120 seconds", out, 120.0f, 1.0f);
    }
    Serial.println();
}

void testPositionConversions() {
    Serial.println("=== testPositionConversions() ===");
    {
        float val = 1.0f;
        float out = convertPosition(val, PositionUnit::SHAFT_ROTATIONS, PositionUnit::ENCODER_COUNTS);
        // 1 rotation => 3,276,800 counts
        checkClose("Position: 1 rotation -> 3,276,800 counts", out, 3276800.0f, 1.0f);
    }
    {
        float val = 180.0f;
        float out = convertPosition(val, PositionUnit::DEGREES, PositionUnit::SHAFT_ROTATIONS);
        // 180 deg => 0.5 rotation
        checkClose("Position: 180 deg -> 0.5 rotation", out, 0.5f, 0.001f);
    }
    Serial.println();
}

void testVelocityConversions() {
    Serial.println("=== testVelocityConversions() ===");
    {
        float val = 1.0f;
        float out = convertVelocity(val, VelocityUnit::ROTATIONS_PER_SECOND, VelocityUnit::COUNTS_PER_SECOND);
        // Expect ~3,276,800
        checkClose("Velocity: 1 RPS -> 3,276,800 c/s", out, 3276800.0f, 10.0f);
    }
    {
        float val = 360.0f;
        float out = convertVelocity(val, VelocityUnit::DEGREES_PER_SECOND, VelocityUnit::ROTATIONS_PER_SECOND);
        // 360 deg/s => 1 rotation/s
        checkClose("Velocity: 360 deg/s -> 1 RPS", out, 1.0f, 0.01f);
    }
    Serial.println();
}

void testAccelerationConversions() {
    Serial.println("=== testAccelerationConversions() ===");
    {
        float val = 1.0f;
        float out = convertAcceleration(val, AccelerationUnit::ROTATIONS_PER_SECOND_SQUARED,
                                        AccelerationUnit::COUNTS_PER_SECOND_SQUARED);
        // 1 RPS^2 => ~3,276,800 c/s^2
        checkClose("Accel: 1 RPS^2 -> 3,276,800 c/s^2", out, 3276800.0f, 100.0f);
    }
    {
        float val = 60.0f;
        float out = convertAcceleration(val, AccelerationUnit::RPM_PER_SECOND,
                                        AccelerationUnit::ROTATIONS_PER_SECOND_SQUARED);
        // 60 rpm/s => ~1 RPS^2 now that factor(RPM_PER_SECOND)=60
        checkClose("Accel: 60 rpm/s -> 1 RPS^2", out, 1.0f, 0.01f);
    }
    Serial.println();
}

void testCurrentConversions() {
    Serial.println("=== testCurrentConversions() ===");
    {
        float val = 1000.0f;
        float out = convertCurrent(val, CurrentUnit::MILLIAMPS, CurrentUnit::AMPS);
        // 1000 mA => 1.0 A now that factor(MILLIAMPS)=1000
        checkClose("Current: 1000mA -> 1A", out, 1.0f, 0.001f);
    }
    {
        float val = 2.5f;
        float out = convertCurrent(val, CurrentUnit::AMPS, CurrentUnit::MILLIAMPS);
        // 2.5 A => 2500 mA
        checkClose("Current: 2.5A -> 2500mA", out, 2500.0f, 0.1f);
    }
    Serial.println();
}

void testVoltageConversions() {
    Serial.println("=== testVoltageConversions() ===");
    {
        float val = 12.0f;
        float out = convertVoltage(val, VoltageUnit::VOLTS, VoltageUnit::MILLIVOLTS);
        // 12 V => 12000 mV
        checkClose("Voltage: 12V -> 12000mV", out, 12000.0f, 1.0f);
    }
    {
        float val = 5000.0f;
        float out = convertVoltage(val, VoltageUnit::MILLIVOLTS, VoltageUnit::VOLTS);
        // 5000 mV => 5.0 V
        checkClose("Voltage: 5000mV -> 5V", out, 5.0f, 0.001f);
    }
    Serial.println();
}

void testTemperatureConversions() {
    Serial.println("=== testTemperatureConversions() ===");
    {
        float val = 25.0f;
        float out = convertTemperature(val, TemperatureUnit::CELSIUS, TemperatureUnit::FAHRENHEIT);
        // 25C => 77F
        checkClose("Temp: 25C -> 77F", out, 77.0f, 1.0f);
    }
    {
        float val = 32.0f;
        float out = convertTemperature(val, TemperatureUnit::FAHRENHEIT, TemperatureUnit::CELSIUS);
        // 32F => 0C
        checkClose("Temp: 32F -> 0C", out, 0.0f, 1.0f);
    }
    {
        float val = 0.0f;
        float out = convertTemperature(val, TemperatureUnit::CELSIUS, TemperatureUnit::KELVIN);
        // 0C => 273.15K
        checkClose("Temp: 0C -> 273.15K", out, 273.15f, 1.0f);
    }
    Serial.println();
}

void setup() {
    Serial.begin(115200);
    Serial.println("test_unit_conversions: BEGIN\n");

    testTimeConversions();
    testPositionConversions();
    testVelocityConversions();
    testAccelerationConversions();
    testCurrentConversions();
    testVoltageConversions();
    testTemperatureConversions();

    if (allTestsPassed) {
        Serial.println("PASSED");
    } else {
        Serial.println("FAILED");
    }
}

void loop() {
    // Not used in this desktop test
}

int main() {
    setup();
    return 0;
}