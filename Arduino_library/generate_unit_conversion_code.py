#!/usr/bin/env python3

"""
generate_arduino_unit_conversions.py

Generates:
  AutoGeneratedUnitConversions.h
  AutoGeneratedUnitConversions.cpp

Fixes:
  Removes usage of an undeclared variable 'divisor' that caused compile errors.
"""

import sys
import json
import os

HEADER_GUARD = "AUTO_GENERATED_UNIT_CONVERSIONS_H"
CPP_FILENAME = "AutoGeneratedUnitConversions.cpp"
H_FILENAME = "AutoGeneratedUnitConversions.h"

# For each category, define which unit in the JSON we treat as the "internal reference"
REFERENCE_UNIT = {
    "time": "timesteps",
    "position": "encoder_counts",
    "velocity": "counts_per_second",
    "acceleration": "counts_per_second_squared",
    "current": "arbitrary_units",
    "voltage": "decivolts",
    "temperature": "celsius",
}

def main(json_filename):
    with open(json_filename, 'r') as f:
        data = json.load(f)

    units_dict = data["units"]              # e.g. {"time": [...], "position": [...], ...}
    factors = data["conversion_factors"]    # e.g. { "seconds": 31250.0, "milliseconds": 31.25, ... }

    # Write .h file
    with open(H_FILENAME, 'w') as hf:
        hf.write(f"#ifndef {HEADER_GUARD}\n")
        hf.write(f"#define {HEADER_GUARD}\n\n")
        hf.write("// This file is auto-generated. Do not edit manually.\n\n")

        for category, unit_list in units_dict.items():
            enum_name = category.capitalize() + "Unit"  # e.g. "TimeUnit"

            # Generate an enum for the category
            hf.write(f"enum class {enum_name} {{\n")
            for i, unit_name in enumerate(unit_list):
                enumerator = unit_name.upper().replace(" ", "_")
                suffix = "," if i < len(unit_list) - 1 else ""
                hf.write(f"    {enumerator}{suffix}\n")
            hf.write("};\n\n")

            # Declare the conversion function
            func_name = f"convert{category.capitalize()}"
            hf.write(f"float {func_name}(float value, {enum_name} fromUnit, {enum_name} toUnit);\n\n")

        hf.write(f"#endif // {HEADER_GUARD}\n")

    # Write .cpp file
    with open(CPP_FILENAME, 'w') as cf:
        cf.write("// Auto-generated. Do not edit manually.\n\n")
        cf.write(f'#include "{H_FILENAME}"\n')
        cf.write("#include <math.h>\n\n")

        # Generate a conversion function per category
        for category, unit_list in units_dict.items():
            enum_name = category.capitalize() + "Unit"
            func_name = f"convert{category.capitalize()}"
            ref_unit = REFERENCE_UNIT.get(category, unit_list[0])
            ref_factor = factors.get(ref_unit, 1.0)

            cf.write(f"float {func_name}(float value, {enum_name} fromUnit, {enum_name} toUnit)\n")
            cf.write("{\n")

            # Handle temperature specially with offset-based conversions
            if category == "temperature":
                cf.write("    // Temperature conversions: celsius <-> fahrenheit <-> kelvin\n\n")
                cf.write("    // Convert to celsius first\n")
                cf.write("    float inCelsius = value;\n")
                cf.write("    switch (fromUnit) {\n")
                cf.write("      case TemperatureUnit::CELSIUS:\n")
                cf.write("        inCelsius = value;\n")
                cf.write("        break;\n")
                cf.write("      case TemperatureUnit::FAHRENHEIT:\n")
                cf.write("        inCelsius = (value - 32.0f) * (5.0f/9.0f);\n")
                cf.write("        break;\n")
                cf.write("      case TemperatureUnit::KELVIN:\n")
                cf.write("        inCelsius = value - 273.15f;\n")
                cf.write("        break;\n")
                cf.write("    }\n\n")

                cf.write("    float outValue = inCelsius;\n")
                cf.write("    switch (toUnit) {\n")
                cf.write("      case TemperatureUnit::CELSIUS:\n")
                cf.write("        outValue = inCelsius;\n")
                cf.write("        break;\n")
                cf.write("      case TemperatureUnit::FAHRENHEIT:\n")
                cf.write("        outValue = (inCelsius * 9.0f/5.0f) + 32.0f;\n")
                cf.write("        break;\n")
                cf.write("      case TemperatureUnit::KELVIN:\n")
                cf.write("        outValue = inCelsius + 273.15f;\n")
                cf.write("        break;\n")
                cf.write("    }\n\n")
                cf.write("    return outValue;\n")
                cf.write("}\n\n")
                continue

            # For other categories, do from->reference->to
            cf.write("    // Convert from 'fromUnit' to reference unit\n")
            cf.write("    float inRef = 0.0f;\n")
            cf.write(f"    switch (fromUnit) {{\n")
            for u in unit_list:
                enumerator = u.upper().replace(" ", "_")
                factor_from = factors.get(u, 1.0) / ref_factor if ref_factor != 0 else 0.0
                cf.write(f"      case {enum_name}::{enumerator}:\n")
                cf.write(f"        inRef = value * {factor_from:.9f};\n")
                cf.write("        break;\n")
            cf.write("    }\n\n")

            cf.write("    // Convert from reference unit to 'toUnit'\n")
            cf.write("    float outVal = 0.0f;\n")
            cf.write(f"    switch (toUnit) {{\n")
            for u in unit_list:
                enumerator = u.upper().replace(" ", "_")
                factor_to = factors.get(u, 1.0) / ref_factor if ref_factor != 0 else 0.0
                cf.write(f"      case {enum_name}::{enumerator}:\n")
                cf.write(f"        {{\n")
                cf.write(f"            float factor = {factor_to:.9f};\n")
                cf.write("            // Avoid divide-by-zero\n")
                cf.write("            if (fabs(factor) < 1e-15) {\n")
                cf.write("                outVal = 0.0f;\n")
                cf.write("            } else {\n")
                cf.write("                outVal = inRef / factor;\n")
                cf.write("            }\n")
                cf.write("        }\n")
                cf.write("        break;\n")
            cf.write("    }\n\n")
            cf.write("    return outVal;\n")
            cf.write("}\n\n")

    print(f"Generated {H_FILENAME} and {CPP_FILENAME} successfully.")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python generate_arduino_unit_conversions.py <unit_conversions.json>")
        sys.exit(1)
    json_file = sys.argv[1]
    if not os.path.isfile(json_file):
        print(f"Error: cannot find the file {json_file}")
        sys.exit(1)
    main(json_file)
