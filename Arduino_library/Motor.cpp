/*
  Motor.cpp

  Implementation of the Motor class. Internally, calls
  the conversion functions from AutoGeneratedUnitConversions.cpp
  to translate your chosen units (e.g. shaft rotations, seconds)
  into the "internal" units (e.g. encoder_counts, timesteps).
*/

#include "Motor.h"

// Constructor: by default, let's pick position=SHAFT_ROTATIONS, time=SECONDS
Motor::Motor()
    : m_positionUnit(PositionUnit::SHAFT_ROTATIONS)
    , m_timeUnit(TimeUnit::SECONDS)
{
    // You could do more initialization here if needed
}

void Motor::setPositionUnit(PositionUnit unit) {
    m_positionUnit = unit;
    Serial.print("[Motor] setPositionUnit to ");
    switch(unit) {
        case PositionUnit::SHAFT_ROTATIONS: Serial.println("SHAFT_ROTATIONS"); break;
        case PositionUnit::DEGREES:         Serial.println("DEGREES"); break;
        case PositionUnit::RADIANS:         Serial.println("RADIANS"); break;
        case PositionUnit::ENCODER_COUNTS:  Serial.println("ENCODER_COUNTS"); break;
    }
}

void Motor::setTimeUnit(TimeUnit unit) {
    m_timeUnit = unit;
    Serial.print("[Motor] setTimeUnit to ");
    switch(unit) {
        case TimeUnit::SECONDS:      Serial.println("SECONDS"); break;
        case TimeUnit::MILLISECONDS: Serial.println("MILLISECONDS"); break;
        case TimeUnit::MINUTES:      Serial.println("MINUTES"); break;
        case TimeUnit::TIMESTEPS:    Serial.println("TIMESTEPS"); break;
    }
}

void Motor::trapezoidMove(float distance, float duration) {
    // Convert the distance from the currently selected position unit to internal 'encoder_counts'
    float distance_internal = convertPosition(distance, m_positionUnit, PositionUnit::ENCODER_COUNTS);

    // Convert the duration from the currently selected time unit to internal 'timesteps' 
    // (or whatever you want to use inside your firmware)
    float duration_internal = convertTime(duration, m_timeUnit, TimeUnit::TIMESTEPS);

    // For demonstration, we'll just print out the results
    Serial.println("[Motor] trapezoidMove called.");
    Serial.print("  distance in chosen unit: ");
    Serial.println(distance);
    Serial.print("  time in chosen unit: ");
    Serial.println(duration);

    Serial.print("  -> distance in encoder_counts: ");
    Serial.println(distance_internal);
    Serial.print("  -> duration in timesteps: ");
    Serial.println(duration_internal);

    // If you had real hardware commands, you might do something like:
    // sendCommandToMotor(distance_internal, duration_internal, ...);
    // For now, it's just a debug demonstration.
}