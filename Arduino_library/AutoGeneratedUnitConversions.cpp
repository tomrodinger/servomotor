// Auto-generated. Do not edit manually.

#include "AutoGeneratedUnitConversions.h"
#include <math.h>

float convertTime(float value, TimeUnit unit, ConversionDirection direction)
{
    switch (unit) {
        case TimeUnit::TIMESTEPS:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 1.000000000; // Convert to internal unit
            } else {
                return value / 1.000000000; // Convert from internal unit
            }
        case TimeUnit::SECONDS:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 31250.000000000; // Convert to internal unit
            } else {
                return value / 31250.000000000; // Convert from internal unit
            }
        case TimeUnit::MILLISECONDS:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 31.250000000; // Convert to internal unit
            } else {
                return value / 31.250000000; // Convert from internal unit
            }
        case TimeUnit::MINUTES:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 1875000.000000000; // Convert to internal unit
            } else {
                return value / 1875000.000000000; // Convert from internal unit
            }
        default:
            return 0.0f; // Invalid unit
    }
}

float convertPosition(float value, PositionUnit unit, ConversionDirection direction)
{
    switch (unit) {
        case PositionUnit::SHAFT_ROTATIONS:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 3276800.000000000; // Convert to internal unit
            } else {
                return value / 3276800.000000000; // Convert from internal unit
            }
        case PositionUnit::DEGREES:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 9102.222222222; // Convert to internal unit
            } else {
                return value / 9102.222222222; // Convert from internal unit
            }
        case PositionUnit::RADIANS:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 521518.917523523; // Convert to internal unit
            } else {
                return value / 521518.917523523; // Convert from internal unit
            }
        case PositionUnit::ENCODER_COUNTS:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 1.000000000; // Convert to internal unit
            } else {
                return value / 1.000000000; // Convert from internal unit
            }
        default:
            return 0.0f; // Invalid unit
    }
}

float convertVelocity(float value, VelocityUnit unit, ConversionDirection direction)
{
    switch (unit) {
        case VelocityUnit::ROTATIONS_PER_SECOND:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 109951162.777600005; // Convert to internal unit
            } else {
                return value / 109951162.777600005; // Convert from internal unit
            }
        case VelocityUnit::RPM:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 1832519.379626667; // Convert to internal unit
            } else {
                return value / 1832519.379626667; // Convert from internal unit
            }
        case VelocityUnit::DEGREES_PER_SECOND:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 305419.896604444; // Convert to internal unit
            } else {
                return value / 305419.896604444; // Convert from internal unit
            }
        case VelocityUnit::RADIANS_PER_SECOND:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 17499271.054756649; // Convert to internal unit
            } else {
                return value / 17499271.054756649; // Convert from internal unit
            }
        case VelocityUnit::COUNTS_PER_SECOND:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 33.554432000; // Convert to internal unit
            } else {
                return value / 33.554432000; // Convert from internal unit
            }
        case VelocityUnit::COUNTS_PER_TIMESTEP:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 109951162.777600005; // Convert to internal unit
            } else {
                return value / 109951162.777600005; // Convert from internal unit
            }
        default:
            return 0.0f; // Invalid unit
    }
}

float convertAcceleration(float value, AccelerationUnit unit, ConversionDirection direction)
{
    switch (unit) {
        case AccelerationUnit::ROTATIONS_PER_SECOND_SQUARED:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 56294.995342131; // Convert to internal unit
            } else {
                return value / 56294.995342131; // Convert from internal unit
            }
        case AccelerationUnit::RPM_PER_SECOND:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 938.249922369; // Convert to internal unit
            } else {
                return value / 938.249922369; // Convert from internal unit
            }
        case AccelerationUnit::DEGREES_PER_SECOND_SQUARED:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 156.374987061; // Convert to internal unit
            } else {
                return value / 156.374987061; // Convert from internal unit
            }
        case AccelerationUnit::RADIANS_PER_SECOND_SQUARED:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 8959.626780035; // Convert to internal unit
            } else {
                return value / 8959.626780035; // Convert from internal unit
            }
        case AccelerationUnit::COUNTS_PER_SECOND_SQUARED:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 0.017179869; // Convert to internal unit
            } else {
                return value / 0.017179869; // Convert from internal unit
            }
        case AccelerationUnit::COUNTS_PER_TIMESTEP_SQUARED:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 16777216.000000000; // Convert to internal unit
            } else {
                return value / 16777216.000000000; // Convert from internal unit
            }
        default:
            return 0.0f; // Invalid unit
    }
}

float convertCurrent(float value, CurrentUnit unit, ConversionDirection direction)
{
    switch (unit) {
        case CurrentUnit::ARBITRARY_UNITS:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 1.000000000; // Convert to internal unit
            } else {
                return value / 1.000000000; // Convert from internal unit
            }
        case CurrentUnit::MILLIAMPS:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 1.000000000; // Convert to internal unit
            } else {
                return value / 1.000000000; // Convert from internal unit
            }
        case CurrentUnit::AMPS:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 1.000000000; // Convert to internal unit
            } else {
                return value / 1.000000000; // Convert from internal unit
            }
        default:
            return 0.0f; // Invalid unit
    }
}

float convertVoltage(float value, VoltageUnit unit, ConversionDirection direction)
{
    switch (unit) {
        case VoltageUnit::MILLIVOLTS:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 1.000000000; // Convert to internal unit
            } else {
                return value / 1.000000000; // Convert from internal unit
            }
        case VoltageUnit::VOLTS:
            if (direction == ConversionDirection::TO_INTERNAL) {
                return value * 1.000000000; // Convert to internal unit
            } else {
                return value / 1.000000000; // Convert from internal unit
            }
        default:
            return 0.0f; // Invalid unit
    }
}

float convertTemperature(float value, TemperatureUnit unit, ConversionDirection direction)
{
    // Temperature conversions: celsius <-> fahrenheit <-> kelvin
    // Internal unit is CELSIUS

    if (direction == ConversionDirection::TO_INTERNAL) {
        // Convert from user unit to internal unit (CELSIUS)
        switch (unit) {
            case TemperatureUnit::CELSIUS:
                return value; // Already in internal unit
            case TemperatureUnit::FAHRENHEIT:
                return (value - 32.0f) * (5.0f/9.0f);
            case TemperatureUnit::KELVIN:
                return value - 273.15f;
            default:
                return 0.0f; // Invalid unit
        }
    } else {
        // Convert from internal unit (CELSIUS) to user unit
        switch (unit) {
            case TemperatureUnit::CELSIUS:
                return value; // Already in user unit
            case TemperatureUnit::FAHRENHEIT:
                return (value * 9.0f/5.0f) + 32.0f;
            case TemperatureUnit::KELVIN:
                return value + 273.15f;
            default:
                return 0.0f; // Invalid unit
        }
    }
}

